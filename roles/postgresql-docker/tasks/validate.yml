---
- name: "Ensure that variable is string"
  ansible.builtin.assert:
    that: vars[item] | type_debug in ["string", "AnsibleUnicode", "AnsibleUnsafeText", "AnsibleVaultEncryptedUnicode"]
    quiet: true
    fail_msg: "The variable must be a string"
  loop:
    - postgresql_version
    - postgresql_docker_build_dockerfile_src
    - postgresql_docker_network
    - postgresql_docker_timezone
    - postgresql_tls_cert_crt
    - postgresql_tls_cert_key


- name: "Ensure that variable is integer"
  ansible.builtin.assert:
    that: lookup('ansible.builtin.vars', item) | string | regex_search("^[0-9]+$")
    quiet: true
    fail_msg: "Variable must be an integer"
  loop:
    - postgresql_docker_uid
    - postgresql_docker_gid
    - postgresql_listen_port


- name: "Ensure that variable is boolean"
  ansible.builtin.assert:
    that: vars[item] | type_debug == "bool"
    quiet: true
    fail_msg: "The variable must be a boolean"
  loop:
    - postgresql_docker_bind_mount_volumes
    - postgresql_tls_enabled


- name: "Ensure that variable is list"
  ansible.builtin.assert:
    that: vars[item] | type_debug in ["list", "AnsibleSequence"]
    quiet: true
    fail_msg: "The variable must be a list"
  loop:
    - postgresql_docker_extra_volumes
    - postgresql_extra_users
    - postgresql_pg_hba_conf_list


- name: "Ensure that variable is dict"
  ansible.builtin.assert:
    that: vars[item] | type_debug in ["dict", "AnsibleMapping"]
    quiet: true
    fail_msg: "The variable must be a dictionary"
  loop:
    - postgresql_conf_dict


- name: "Ensure that password_encryption is valid"
  ansible.builtin.assert:
    that: postgresql_conf_runtime.password_encryption in ["scram-sha-256", "md5"]
    fail_msg: "Invalid value: {{ postgresql_conf_runtime.password_encryption }}"
    quiet: true


- name: "Check certificate variables length"
  ansible.builtin.assert:
    that: lookup('ansible.builtin.vars', item) | length > 1024
    quiet: true
  when: postgresql_tls_enabled
  loop:
    - postgresql_tls_cert_crt
    - postgresql_tls_cert_key
  loop_control:
    label: "{{ item }}"
