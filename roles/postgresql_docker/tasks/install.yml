---
- name: "Create directories: ..."
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
  when: item.enabled | default(true)
  loop:
    - { path: "{{ postgresql_docker_compose_dir }}", mode: '0750' }
    - { path: "{{ postgresql_docker_build_dir }}", mode: '0755',
        enabled: "{{ _postgresql_docker_build_enabled }}" }
    - { path: "{{ postgresql_docker_conf_dir }}", mode: '0755' }
    - { path: "{{ postgresql_docker_data_dir }}", owner: "{{ postgresql_docker_uid }}", group: "{{ postgresql_docker_gid }}", mode: '0700',
        enabled: "{{ postgresql_docker_bind_mount_volumes }}" }
  tags:
    - postgresql
    - config


- name: "Copy file from template: {{ postgresql_docker_compose_dir }}/docker-compose.yml"
  ansible.builtin.template:
    src: "docker-compose.yml.j2"
    dest: "{{ postgresql_docker_compose_dir }}/docker-compose.yml"
    owner: root
    group: root
    mode: '0600'
  tags:
    - postgresql
    - config


- name: "Copy file from template: {{ postgresql_docker_build_dir }}/Dockerfile"
  ansible.builtin.template:
    src: "{{ postgresql_docker_build_template }}"
    dest: "{{ postgresql_docker_build_dir }}/Dockerfile"
    owner: root
    group: root
    mode: '0600'
  when: _postgresql_docker_build_enabled
  tags:
    - postgresql
    - config


- name: "Copy files from template: {{ postgresql_docker_conf_dir }}/"
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ postgresql_docker_conf_dir }}/{{ item | basename | regex_replace('\\.j2$', '') }}"
    owner: root
    group: root
    mode: '0644'
  notify: restart postgresql-docker
  loop:
    - "pg_hba.conf.j2"
    - "postgresql.conf.j2"
  tags:
    - postgresql
    - config


- name: "Create files: {{ postgresql_docker_conf_dir }}/"
  ansible.builtin.copy:
    dest: "{{ postgresql_docker_conf_dir }}/{{ item.filename }}"
    content: "{{ item.content }}"
    owner: "{{ postgresql_docker_uid }}"
    group: "{{ postgresql_docker_gid }}"
    mode: '0600'
  notify: restart postgresql-docker
  when: postgresql_tls_enabled
  loop:
    - { filename: "server.crt", content: "{{ postgresql_tls_cert_crt }}" }
    - { filename: "server.key", content: "{{ postgresql_tls_cert_key }}" }
  loop_control:
    label: "{{ item.filename }}"
  tags:
    - postgresql
    - config


- name: "Copy file from template: {{ postgresql_docker_compose_dir }}/psql.sh"
  ansible.builtin.template:
    src: "psql.sh.j2"
    dest: "{{ postgresql_docker_compose_dir }}/psql.sh"
    owner: root
    group: root
    mode: '0755'
  tags:
    - postgresql
    - copy


- name: "docker-compose up: {{ postgresql_docker_compose_dir }}"
  community.docker.docker_compose_v2:
    project_src: "{{ postgresql_docker_compose_dir }}"
    pull: always
    build: always
  register: r_postgresql_docker_start_result
  tags:
    - postgresql
    - docker-compose


- name: "Flush handlers"
  ansible.builtin.meta: flush_handlers
  tags:
    - postgresql
